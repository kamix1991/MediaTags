import com.drew.imaging.ImageMetadataReader;
import com.drew.metadata.Directory;
import com.drew.metadata.Metadata;
import com.drew.metadata.Tag;
import java.io.File;
import java.util.concurrent.TimeUnit;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.sourceforge.filebot.mediainfo.MediaInfo;
//import net.sourceforge.filebot.mediainfo.MediaInfo;

public class JFrame extends javax.swing.JFrame {

    public JFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButtonMP3 = new javax.swing.JButton();
        jButtonAVI = new javax.swing.JButton();
        jButtonJPEG = new javax.swing.JButton();
        jTextFieldPath = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        jScrollPane2.setViewportView(jScrollPane1);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jButtonMP3.setText("MP3");
        jButtonMP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMP3ActionPerformed(evt);
            }
        });

        jButtonAVI.setText("AVI");
        jButtonAVI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAVIActionPerformed(evt);
            }
        });

        jButtonJPEG.setText("JPEG");
        jButtonJPEG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonJPEGActionPerformed(evt);
            }
        });

        jTextFieldPath.setText("/home/kamix/Dokumenty/semestr 6/Techniki multimedialne/projekt/MediaTags/files");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButtonMP3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonJPEG)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAVI)
                .addContainerGap(245, Short.MAX_VALUE))
            .addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonMP3)
                    .addComponent(jButtonJPEG)
                    .addComponent(jButtonAVI))
                .addGap(0, 18, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonMP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMP3ActionPerformed
        try {
            jTable1.setAutoCreateRowSorter(true);
            String path = jTextFieldPath.getText();
            File folder = new File(path);
            File[] listOfFiles = folder.listFiles();
            MediaInfo mp3_info = new MediaInfo();
            int howManyMp3 = 0;
            for (File file : listOfFiles) {

                if (file.getName().endsWith(".mp3")) {

                    howManyMp3++;
                }
            }
            
            Object[][] data = new Object[howManyMp3][13];
            int j = 0;
            String[] columnNames = new String[]{"File", "Artist", "Title", "Album", "Publisher", "Genre", "Duration[hh:mm:ss]", "Rip date", "File size[Mb]",
                "Format", "Language", "Bit rate[Kbps]", "Channel(s)"};
            for (File file : listOfFiles) {
                if (file.getName().endsWith(".mp3")) {
                    
                    mp3_info.open(file);
                    
                    System.out.println(mp3_info.inform());
                    
                    data[j][0] = file.getName();
                    
                    //GENERAL
                    data[j][1] = mp3_info.get(MediaInfo.StreamKind.General, 0, "Performer", MediaInfo.InfoKind.Text);
                    data[j][2] = mp3_info.get(MediaInfo.StreamKind.General, 0, "Track", MediaInfo.InfoKind.Text);
                    data[j][3] = mp3_info.get(MediaInfo.StreamKind.General, 0, "Album", MediaInfo.InfoKind.Text);
                    data[j][4] = mp3_info.get(MediaInfo.StreamKind.General, 0, "Publisher", MediaInfo.InfoKind.Text);
                    data[j][5] = mp3_info.get(MediaInfo.StreamKind.General, 0, "Genre", MediaInfo.InfoKind.Text);
                    data[j][6] = MSconvert(Long.parseLong(mp3_info.get(MediaInfo.StreamKind.General, 0, "Duration", MediaInfo.InfoKind.Text)));
                    data[j][7] = mp3_info.get(MediaInfo.StreamKind.General, 0, "Rip date", MediaInfo.InfoKind.Text);
                    data[j][8] = bconvert(Float.parseFloat(mp3_info.get(MediaInfo.StreamKind.General, 0, "FileSize", MediaInfo.InfoKind.Text)));
                    //AUDIO
                    data[j][9] = mp3_info.get(MediaInfo.StreamKind.Audio, 0, "Format", MediaInfo.InfoKind.Text);
                    data[j][10] = mp3_info.get(MediaInfo.StreamKind.Audio, 0, "Language", MediaInfo.InfoKind.Text);
                    data[j][11] = Integer.parseInt(mp3_info.get(MediaInfo.StreamKind.Audio, 0, "BitRate", MediaInfo.InfoKind.Text))/1000;
                    data[j][12] = mp3_info.get(MediaInfo.StreamKind.Audio, 0, "Channel(s)", MediaInfo.InfoKind.Text);
                    
                    j++;
                }
            }
            jTable1.setModel(new DefaultTableModel(data, columnNames));
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        } catch (Exception e) {
            System.exit(1);
        }
    }//GEN-LAST:event_jButtonMP3ActionPerformed

    private void jButtonAVIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAVIActionPerformed
        // TODO add your handling code here:
        jTable1.setAutoCreateRowSorter(true);
        
        MediaInfo avi_info = new MediaInfo();
        
        
        try {
            jTable1.setAutoCreateRowSorter(true);
            String path = jTextFieldPath.getText();
            File folder = new File(path);
            File[] listOfFiles = folder.listFiles();
            int howManyAvi = 0;
            for (File file : listOfFiles) {

                if (file.getName().endsWith(".avi")) {
                    howManyAvi++;
                }
            }
            String[] columnNames = new String[]{"File", "File size[Mb]", "Duration[hh:mm:ss]", "Overall bit rate",
                "Video format", "Video codec", "Video bit rate[Kbps]", "Width[pixels]", "Height[pixels]", "Display aspect ratio", "Frame rate", "Video stream size[Mb]",
                "Audio Format", "Audio codec", "Audio bit rate[Kbps]", "Channel(s)", "Audio stream size[Mb]"};
            Object[][] data = new Object[howManyAvi][17];

            int j = 0;
            for (File file : listOfFiles) {
                if (file.getName().endsWith(".avi")) {
                   
                    avi_info.open(file);
                    
                    System.out.println(avi_info.inform());
                    
                    data[j][0] = file.getName();
                    
                    //GENERAL
                    data[j][1] = bconvert(Float.parseFloat(avi_info.get(MediaInfo.StreamKind.General, 0, "FileSize", MediaInfo.InfoKind.Text)));
                    data[j][2] = MSconvert(Long.parseLong(avi_info.get(MediaInfo.StreamKind.General, 0, "Duration", MediaInfo.InfoKind.Text)));
                    data[j][3] = avi_info.get(MediaInfo.StreamKind.General, 0, "OverallBitRate", MediaInfo.InfoKind.Text);
                    //VIDEO
                    data[j][4] = avi_info.get(MediaInfo.StreamKind.Video, 0, "Format", MediaInfo.InfoKind.Text);
                    data[j][5] = avi_info.get(MediaInfo.StreamKind.Video, 0, "CodecID/Hint", MediaInfo.InfoKind.Text);
                    data[j][6] = Integer.parseInt(avi_info.get(MediaInfo.StreamKind.Video, 0, "BitRate", MediaInfo.InfoKind.Text))/1000;
                    data[j][7] = avi_info.get(MediaInfo.StreamKind.Video, 0, "Width", MediaInfo.InfoKind.Text);
                    data[j][8] = avi_info.get(MediaInfo.StreamKind.Video, 0, "Height", MediaInfo.InfoKind.Text);
                    data[j][9] = avi_info.get(MediaInfo.StreamKind.Video, 0, "DisplayAspectRatio", MediaInfo.InfoKind.Text);
                    data[j][10] = avi_info.get(MediaInfo.StreamKind.Video, 0, "FrameRate", MediaInfo.InfoKind.Text);
                    data[j][11] = bconvert(Float.parseFloat(avi_info.get(MediaInfo.StreamKind.Video, 0, "StreamSize", MediaInfo.InfoKind.Text)));//zamienione na Mb
                    //AUDIO
                    data[j][12] = avi_info.get(MediaInfo.StreamKind.Audio, 0, "Format", MediaInfo.InfoKind.Text);
                    data[j][13] = avi_info.get(MediaInfo.StreamKind.Audio, 0, "CodecID/Hint", MediaInfo.InfoKind.Text);
                    data[j][14] = Integer.parseInt(avi_info.get(MediaInfo.StreamKind.Audio, 0, "BitRate", MediaInfo.InfoKind.Text))/1000;
                    data[j][15] = avi_info.get(MediaInfo.StreamKind.Audio, 0, "Channel(s)", MediaInfo.InfoKind.Text);
                    data[j][16] = bconvert(Float.parseFloat(avi_info.get(MediaInfo.StreamKind.Audio, 0, "StreamSize", MediaInfo.InfoKind.Text)));
                    
                    j++;
                }
            }
            jTable1.setModel(new DefaultTableModel(data, columnNames));
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        } catch (Exception e) {
            System.exit(1);
        }
        
    }//GEN-LAST:event_jButtonAVIActionPerformed

    private void jButtonJPEGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonJPEGActionPerformed
        // TODO add your handling code here:
        try {
            jTable1.setAutoCreateRowSorter(true);
            String path = jTextFieldPath.getText();
            File folder = new File(path);
            File[] listOfFiles = folder.listFiles();
            int howManyJpeg = 0;
            for (File file : listOfFiles) {

                if (file.getName().toLowerCase().endsWith(".jpeg") || file.getName().toLowerCase().endsWith(".jpg")) {
                    howManyJpeg++;
                }
            }
            String[] columnNames = new String[]{"File", "Width[pixels]", "Height[pixels]", "Compression Type",
                "Date/Time Original", "Make", "Model", "Exposure Mode", "White Balance Mode", "Scene Capture Type",
                "Contrast", "Saturation", "Sharpness"};
            
            Object[][] data = new Object[howManyJpeg][13];
            
            int i=0;
            Metadata metadata;
            for (File file : listOfFiles) {

                if (file.getName().toLowerCase().endsWith(".jpeg") || file.getName().toLowerCase().endsWith(".jpg")) {
                    metadata = ImageMetadataReader.readMetadata(file);
                    data[i][0] = file.getName();
                    for (Directory directory : metadata.getDirectories()) {
                        for (Tag tag : directory.getTags()) {
                            
                            System.out.println(tag.toString());

                            if(tag.getTagName().equalsIgnoreCase("Image Width"))
                                data[i][1] = tag.getDescription().substring(0, tag.getDescription().length()-7);
                            if(tag.getTagName().equalsIgnoreCase("Image Height"))
                                data[i][2] = tag.getDescription().substring(0, tag.getDescription().length()-7);
                            if(tag.getTagName().equalsIgnoreCase("Compression Type"))
                                data[i][3] = tag.getDescription();
                            if(tag.getTagName().equalsIgnoreCase("Date/Time Original"))
                                data[i][4] = tag.getDescription();
                            if(tag.getTagName().equalsIgnoreCase("Make"))
                                data[i][5] = tag.getDescription();
                            if(tag.getTagName().equalsIgnoreCase("Model"))
                                data[i][6] = tag.getDescription();
                            if(tag.getTagName().equalsIgnoreCase("Exposure Mode"))
                                data[i][7] = tag.getDescription();
                            if(tag.getTagName().equalsIgnoreCase("White Balance Mode"))
                                data[i][8] = tag.getDescription();
                            if(tag.getTagName().equalsIgnoreCase("Scene Capture Type"))
                                data[i][9] = tag.getDescription();
                            if(tag.getTagName().equalsIgnoreCase("Contrast"))
                                data[i][10] = tag.getDescription();
                            if(tag.getTagName().equalsIgnoreCase("Saturation"))
                                data[i][11] = tag.getDescription();
                            if(tag.getTagName().equalsIgnoreCase("Sharpness"))
                                data[i][12] = tag.getDescription();
                        }
                    }
                     i++;
                }
            }
            jTable1.setModel(new DefaultTableModel(data, columnNames));
            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        } catch (Exception e) {
            System.exit(1);
        }
    }//GEN-LAST:event_jButtonJPEGActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAVI;
    private javax.swing.JButton jButtonJPEG;
    private javax.swing.JButton jButtonMP3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldPath;
    // End of variables declaration//GEN-END:variables

    private String MSconvert(long miliSeconds)
     {
      int hrs = (int) TimeUnit.MILLISECONDS.toHours(miliSeconds) % 24;
      int min = (int) TimeUnit.MILLISECONDS.toMinutes(miliSeconds) % 60;
      int sec = (int) TimeUnit.MILLISECONDS.toSeconds(miliSeconds) % 60;
      return String.format("%02d:%02d:%02d", hrs, min, sec);
     }

    private String bconvert(Float b)
     {
        return String.format("%.2f", b/1024/1024);
     }

}